# -*- coding: utf-8 -*-
"""NN_for_PartD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I_IM2Xx57JJ01djyKlFQfy3TxqD5ymUn
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

#Loading data
data = np.loadtxt("datasetC.csv", delimiter=",", dtype=np.float64)
print (data)

#Last column containing Labels
features = data[:,0:-1]
labels = data[:, -1]
#print (features)
#print (labels)

#Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

#Scalling the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.fit_transform(X_test)
print (X_train_scaled)

# Build the neural network
classifier = Sequential()
classifier.add(Dense(units=128, activation='relu', input_dim=X_train_scaled.shape[1])) #using mainstream RELU function
classifier.add(Dense(units=64, activation='relu'))
classifier.add(Dense(units=5, activation='softmax'))  #the same number as our Labels( I assume 5 classes)

#encoding y data due to compile
y_train_encoded = to_categorical(y_train - 1, num_classes=5)  # Subtract 1 to convert 1-5 to 0-4
y_test_encoded = to_categorical(y_test - 1, num_classes=5)

#Compile
classifier.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])

# Train (epoch, batch, validation, verbose, validation_split all can change with our need)
classifier.fit( X_train_scaled, y_train_encoded, batch_size=32, epochs= 10, verbose=1, validation_split=0.1)

# Evaluate the performance
y_pred_probs = classifier.predict(X_test_scaled)
y_pred = np.argmax(y_pred_probs, axis=1)
accuracy = accuracy_score(np.argmax(y_test_encoded, axis=1), y_pred)
conf_matrix = confusion_matrix(np.argmax(y_test_encoded, axis=1), y_pred)
classification_rep = classification_report(np.argmax(y_test_encoded, axis=1), y_pred)

print(f'Accuracy: {accuracy:.2f}')
print('\nConfusion Matrix:')
print(conf_matrix)
print('\nClassification Report:')
print(classification_rep)