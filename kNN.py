# -*- coding: utf-8 -*-
"""K-NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Enu1Y_3dP3mNXdYA26T5gjwqwLSxaZ2J
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.lines import Line2D
from sklearn.metrics import confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.inspection import DecisionBoundaryDisplay
import seaborn as sns

from data import load_data


# load data
train_x, test_x, train_y, test_y = load_data("dataset.csv", 0.5)

train_data = np.concatenate([train_x, train_y.reshape(-1, 1)], axis=1)
test_data = np.concatenate([test_x, test_y.reshape(-1, 1)], axis=1)

for k in range(10):
  ## K-NN to the training set
  classifier = KNeighborsClassifier(n_neighbors=k+1, weights='uniform')
  classifier.fit(train_x, train_y)

  # predict test results
  pred_y = classifier.predict(test_x)

  ## Making Confusion Matrix
  cm = confusion_matrix( test_y, pred_y)

  cm_df = pd.DataFrame(cm,
                     index = ['1','2','3'],
                     columns = ['1','2','3'])

  ## Plots
  # Plotting the confusion matrix
  plt.figure()
  sns.heatmap(cm_df, annot=True)
  plt.title('Confusion Matrix')
  plt.ylabel('Actal Values')
  plt.xlabel('Predicted Values')
  plt.show()

  # Plotting boundary regions
  fig = DecisionBoundaryDisplay.from_estimator(classifier, train_x)
  plt.title('Decision Regions for k={} on Training Data'.format(k+1))
  plt.show()

